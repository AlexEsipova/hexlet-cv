= content_for :header do
  = @resume


.container
  .row
    .col-lg-10.mx-auto
      / .d-flex.mb-3.text-muted
      /   .d-flex.mr-4
      /     .mr-2= t('.published')
      /     .font-weight-light
      /       = distance_of_time_in_words_to_now @resume.created_at
      /   .d-flex.mr-4
      /     .mr-2= t('.views')
      /     .font-weight-light= 3
      /   .d-flex.mr-4
      /     .mr-2= t('.answers')
      /     .font-weight-light= 3
      /   .d-flex.mr-4
      /     .mr-2= t('.likes')
      /     .font-weight-light= 3

      .mb-5
        = render 'information'

        .mt-3
          - if @resume.comments.any?
            .small
              - @resume.comments.each do |comment|
                hr.my-2
                .d-flex
                  .mr-auto
                    span.mr-1.hexlet-cv-content.hexlet-cv-inline-paragraph
                      == markdown2html comment.content
                    - if comment.user
                      span.mr-1
                        = link_to comment.user, user_path(comment.user)
                    span.text-muted
                      = l comment.created_at, format: :short
                  - if comment.user == current_user
                    = link_to 'x', resume_comment_path(@resume, comment), method: :delete, data: { confirm: t('confirm') }
          hr.my-2
          a.d-block.small.text-muted(href="#resume-#{@resume.id}" data-toggle="collapse")
            = t('.add_a_comment')
          .collapse(id="resume-#{@resume.id}")
            = simple_form_for @resume.comments.build, url: resume_comments_path(@resume), wrapper: 'inline_form' do |f|
              .row
                .col-9
                  = f.input :content, as: :text, input_html: { class: 'form-control-sm' }
                .col-1
                  = f.submit class: 'btn btn-sm btn-outline-primary'

      .lead.mb-3= t('.recomendations')

      - @resume_answers.each do |answer|
        .card.mb-4
          .card-header.small.mb-2.d-flex
            .mr-auto
              span.font-weight-bold= link_to answer.user, user_path(answer.user)
              span.ml-2.font-weight-light= distance_of_time_in_words_to_now answer.created_at
            - if current_user == answer.user
              div
                span.mr-2
                  = link_to t('.edit'), edit_resume_answer_path(@resume, answer)
                = link_to t('.remove'), resume_answer_path(@resume, answer), method: :delete, data: { confirm: t('confirmation') }
          .card-body.d-flex
            .mr-3.h4
              - let @current_user_likes_by_answer_id.fetch(answer.id, nil) do |like|
                .text-center.text-muted.mb-2.mt-1.font-weight-light
                  = answer.likes.count
                - if like
                  = link_to answer_like_path(answer, like), method: 'delete', class: 'text-decoration-none' do
                    i.fas.fa-thumbs-up.text-secondary
                - else
                  = link_to answer_likes_path(answer), method: 'post', class: 'text-decoration-none' do
                    i.far.fa-thumbs-up.text-secondary
            .d-flex.flex-column
              .hexlet-cv-content.mb-3
                == markdown2html answer.content
              .mt-n2
                - if answer.comments.any?
                  .small
                    - answer.comments.each do |comment|
                      hr.my-2
                      .d-flex
                        .mr-auto
                          span.mr-2.hexlet-cv-content.hexlet-cv-inline-paragraph
                            == markdown2html comment.content
                          - if comment.user
                            span.mr-1
                              = link_to comment.user, user_path(comment.user)
                          span.text-muted
                            = l comment.created_at, format: :short
                        - if comment.user == current_user
                          = link_to 'x', answer_comment_path(answer, comment), method: :delete, data: { confirm: t('confirm') }
                hr.my-2
                a.d-block.small.text-muted(href="#answer-#{answer.id}" data-toggle="collapse")
                  = t('.add_a_comment')
                .collapse(id="answer-#{answer.id}")
                  = simple_form_for answer.comments.build, url: answer_comments_path(answer), wrapper: 'inline_form' do |f|
                    .row
                      .col-9
                        = f.input :content, as: :text, input_html: { class: 'form-control-sm' }
                      .col-3
                        = f.submit class: 'btn btn-sm btn-outline-primary'


      - if @current_user_answer
        .text-center.lead= t('.answer_exists')
      - else
        = render 'web/shared/answer_form'
