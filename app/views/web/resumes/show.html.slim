= content_for :header do
  = @resume

.container
  .row
    .col-lg-9.mx-auto
      / .d-flex.mb-3.text-muted
      /   .d-flex.mr-4
      /     .mr-2= t('.published')
      /     .font-weight-light
      /       = distance_of_time_in_words_to_now @resume.created_at
      /   .d-flex.mr-4
      /     .mr-2= t('.views')
      /     .font-weight-light= 3
      /   .d-flex.mr-4
      /     .mr-2= t('.answers')
      /     .font-weight-light= 3
      /   .d-flex.mr-4
      /     .mr-2= t('.likes')
      /     .font-weight-light= 3
      .mb-5
        = render 'information'
      .lead.mb-3= t('.recomendations')

      - @resume.answers.each do |answer|
        .card.mb-4
          .card-header.small.mb-2.d-flex
            .mr-auto
              span.font-weight-bold= link_to answer.user, user_path(answer.user)
              span.ml-2.font-weight-light= distance_of_time_in_words_to_now answer.created_at
            - if current_user == answer.user
              div
                span.mr-2
                  = link_to t('.edit'), edit_resume_answer_path(@resume, answer)
                = link_to t('.remove'), resume_answer_path(@resume, answer), method: :delete, data: { confirm: t('confirmation') }
          .card-body.hexlet-cv-content
            == markdown2html answer.content
            .text-right.small
              - let @current_user_likes_by_answer_id.fetch(answer.id, nil) do |like|
                - if like
                  = link_to answer_like_path(answer, like), method: 'delete', class: 'text-decoration-none' do
                    i.fas.fa-thumbs-up
                    | &nbsp;
                    = answer.likes.count
                - else
                  = link_to answer_likes_path(answer), method: 'post', class: 'text-decoration-none' do
                    i.far.fa-thumbs-up
                    | &nbsp;
                    = answer.likes.count

      - if @current_user_answer
        .text-center.lead= t('.answer_exists')
      - else
        = render 'web/shared/answer_form'
